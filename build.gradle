import net.minecraftforge.gradle.common.tasks.SignJar

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

archivesBaseName = "${mod_id}-forge"
version = "${minecraft_version}-${mod_version}"
group = "com.mrcrayfish"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "cfm.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'cfm'
            arg '-mixin.config=cfm.mixins.json'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'cfm'
            arg '-mixin.config=cfm.mixins.json'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'cfm'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'cfm', '--all', '--output', file('src/generated/resources/')
            arg '-mixin.config=cfm.mixins.json'
            mods {
                cfm {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.0.14'
    implementation fg.deobf('curse.maven:catalogue-459701:4590890')
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation 'curse.maven:watermedia-869524:5226119'
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : mod_name,
            "Specification-Vendor"    : mod_author,
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${version}",
            "Implementation-Vendor"   : mod_author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "cfm.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        project.hasProperty('keyStore') || System.getenv("KEYSTORE")
    }
    keyStore = project.findProperty('keyStore') ?: System.getenv("KEYSTORE")
    alias = project.findProperty('keyStoreAlias') ?: System.getenv("KEYSTORE_ALIAS")
    storePass = project.findProperty('keyStorePass') ?: System.getenv("KEYSTORE_PASS")
    inputFile = outputFile = jar.archiveFile
}

jar.finalizedBy 'signJar'
signJar.mustRunAfter 'reobfJar'

task incrementBuild {
    doLast {
        int version = file('/release_build').text.toInteger()
        file('/release_build').text = version + 1
    }
}
